---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fabric-config
  namespace: ledger
data:
  configtx.yaml: |
    ---
    ################################################################################
    #
    #   Section: Organizations
    #
    #   - This section defines the different organizational identities which will
    #   be referenced later in the configuration.
    #
    ################################################################################
    Organizations:

        # SampleOrg defines an MSP using the sampleconfig.  It should never be used
        # in production but may be used as a template for other definitions
        - &OrdererOrg
            # DefaultOrg defines the organization which is used in the sampleconfig
            # of the fabric.git development environment
            Name: OrdererOrg

            # ID to load the MSP definition as
            ID: OrdererMSP

            # MSPDir is the filesystem path which contains the MSP configuration
            MSPDir: crypto-config/ordererOrganizations/example.com/msp

            # AdminPrincipal dictates the type of principal used for an organization's Admins policy
            # Today, only the values of Role.ADMIN ad Role.MEMBER are accepted, which indicates a principal
            # of role type ADMIN and role type MEMBER respectively
            AdminPrincipal: Role.MEMBER

        - &Org1
            # DefaultOrg defines the organization which is used in the sampleconfig
            # of the fabric.git development environment
            Name: Org1MSP

            # ID to load the MSP definition as
            ID: Org1MSP

            MSPDir: crypto-config/peerOrganizations/org1.example.com/msp

            # AdminPrincipal dictates the type of principal used for an organization's Admins policy
            # Today, only the values of Role.ADMIN ad Role.MEMBER are accepted, which indicates a principal
            # of role type ADMIN and role type MEMBER respectively
            AdminPrincipal: Role.MEMBER

            AnchorPeers:
                # AnchorPeers defines the location of peers which can be used
                # for cross org gossip communication.  Note, this value is only
                # encoded in the genesis block in the Application section context
                - Host: org1peer1
                  Port: 30110

        - &Org2
            # DefaultOrg defines the organization which is used in the sampleconfig
            # of the fabric.git development environment
            Name: Org2MSP

            # ID to load the MSP definition as
            ID: Org2MSP

            MSPDir: crypto-config/peerOrganizations/org2.example.com/msp

            # AdminPrincipal dictates the type of principal used for an organization's Admins policy
            # Today, only the values of Role.ADMIN ad Role.MEMBER are accepted, which indicates a principal
            # of role type ADMIN and role type MEMBER respectively
            AdminPrincipal: Role.MEMBER

            AnchorPeers:
                # AnchorPeers defines the location of peers which can be used
                # for cross org gossip communication.  Note, this value is only
                # encoded in the genesis block in the Application section context
                - Host: org2peer1
                  Port: 30210

        - &Org3
            # DefaultOrg defines the organization which is used in the sampleconfig
            # of the fabric.git development environment
            Name: Org3MSP

            # ID to load the MSP definition as
            ID: Org3MSP

            MSPDir: crypto-config/peerOrganizations/org3.example.com/msp

            # AdminPrincipal dictates the type of principal used for an organization's Admins policy
            # Today, only the values of Role.ADMIN ad Role.MEMBER are accepted, which indicates a principal
            # of role type ADMIN and role type MEMBER respectively
            AdminPrincipal: Role.MEMBER

            AnchorPeers:
                # AnchorPeers defines the location of peers which can be used
                # for cross org gossip communication.  Note, this value is only
                # encoded in the genesis block in the Application section context
                - Host: org3peer1
                  Port: 30310

        - &Org4
            # DefaultOrg defines the organization which is used in the sampleconfig
            # of the fabric.git development environment
            Name: Org4MSP

            # ID to load the MSP definition as
            ID: Org4MSP

            MSPDir: crypto-config/peerOrganizations/org4.example.com/msp

            # AdminPrincipal dictates the type of principal used for an organization's Admins policy
            # Today, only the values of Role.ADMIN ad Role.MEMBER are accepted, which indicates a principal
            # of role type ADMIN and role type MEMBER respectively
            AdminPrincipal: Role.MEMBER

            AnchorPeers:
                # AnchorPeers defines the location of peers which can be used
                # for cross org gossip communication.  Note, this value is only
                # encoded in the genesis block in the Application section context
                - Host: org4peer1
                  Port: 30410

    ################################################################################
    #
    #   SECTION: Orderer
    #
    #   - This section defines the values to encode into a config transaction or
    #   genesis block for orderer related parameters
    #
    ################################################################################
    Orderer: &OrdererDefaults

        # Orderer Type: The orderer implementation to start
        # Available types are "solo" and "kafka"
        OrdererType: solo

        Addresses:
            - orderer:31010

        # Batch Timeout: The amount of time to wait before creating a batch
        BatchTimeout: 2s

        # Batch Size: Controls the number of messages batched into a block
        BatchSize:

            # Max Message Count: The maximum number of messages to permit in a batch
            MaxMessageCount: 10

            # Absolute Max Bytes: The absolute maximum number of bytes allowed for
            # the serialized messages in a batch.
            AbsoluteMaxBytes: 99 MB

            # Preferred Max Bytes: The preferred maximum number of bytes allowed for
            # the serialized messages in a batch. A message larger than the preferred
            # max bytes will result in a batch larger than preferred max bytes.
            PreferredMaxBytes: 512 KB

        Kafka:
            # Brokers: A list of Kafka brokers to which the orderer connects
            # NOTE: Use IP:port notation
            Brokers:
                - 127.0.0.1:9092

        # Organizations is the list of orgs which are defined as participants on
        # the orderer side of the network
        Organizations:

    ################################################################################
    #
    #   SECTION: Application
    #
    #   - This section defines the values to encode into a config transaction or
    #   genesis block for application related parameters
    #
    ################################################################################
    Application: &ApplicationDefaults

        # Organizations is the list of orgs which are defined as participants on
        # the application side of the network
        Organizations:

    ################################################################################
    #
    #   Profile
    #
    #   - Different configuration profiles may be encoded here to be specified
    #   as parameters to the configtxgen tool
    #
    ################################################################################
    Profiles:

        FourOrgsOrdererGenesis:
            Orderer:
                <<: *OrdererDefaults
                Organizations:
                    - *OrdererOrg
            Consortiums:
                SampleConsortium:
                    Organizations:
                        - *Org1
                        - *Org2
                        - *Org3
                        - *Org4
        FourOrgsChannel:
            Consortium: SampleConsortium
            Application:
                <<: *ApplicationDefaults
                Organizations:
                    - *Org1
                    - *Org2
                    - *Org3
                    - *Org4

  crypto-config.yaml: |
    # ---------------------------------------------------------------------------
    # "OrdererOrgs" - Definition of organizations managing orderer nodes
    # ---------------------------------------------------------------------------
    OrdererOrgs:
      # ---------------------------------------------------------------------------
      # Orderer
      # ---------------------------------------------------------------------------
      - Name: Orderer
        Domain: example.com
        # ---------------------------------------------------------------------------
        # "Specs" - See PeerOrgs below for complete description
        # ---------------------------------------------------------------------------
        Specs:
          - Hostname: orderer
    # ---------------------------------------------------------------------------
    # "PeerOrgs" - Definition of organizations managing peer nodes
    # ---------------------------------------------------------------------------
    PeerOrgs:
      # ---------------------------------------------------------------------------
      # Org1
      # ---------------------------------------------------------------------------
      - Name: Org1
        Domain: org1.example.com
        # ---------------------------------------------------------------------------
        # "Specs"
        # ---------------------------------------------------------------------------
        # Uncomment this section to enable the explicit definition of hosts in your
        # configuration.  Most users will want to use Template, below
        #
        # Specs is an array of Spec entries.  Each Spec entry consists of two fields:
        #   - Hostname:   (Required) The desired hostname, sans the domain.
        #   - CommonName: (Optional) Specifies the template or explicit override for
        #                 the CN.  By default, this is the template:
        #
        #                              "{{.Hostname}}.{{.Domain}}"
        #
        #                 which obtains its values from the Spec.Hostname and
        #                 Org.Domain, respectively.
        # ---------------------------------------------------------------------------
        # Specs:
        #   - Hostname: foo # implicitly "foo.org1.example.com"
        #     CommonName: foo27.org5.example.com # overrides Hostname-based FQDN set above
        #   - Hostname: bar
        #   - Hostname: baz
        # ---------------------------------------------------------------------------
        # "Template"
        # ---------------------------------------------------------------------------
        # Allows for the definition of 1 or more hosts that are created sequentially
        # from a template. By default, this looks like "peer%d" from 0 to Count-1.
        # You may override the number of nodes (Count), the starting index (Start)
        # or the template used to construct the name (Hostname).
        #
        # Note: Template and Specs are not mutually exclusive.  You may define both
        # sections and the aggregate nodes will be created for you.  Take care with
        # name collisions
        # ---------------------------------------------------------------------------
        Template:
          Count: 2
          # Start: 5
          # Hostname: {{.Prefix}}{{.Index}} # default
        # ---------------------------------------------------------------------------
        # "Users"
        # ---------------------------------------------------------------------------
        # Count: The number of user accounts _in addition_ to Admin
        # ---------------------------------------------------------------------------
        Users:
          Count: 1
      # ---------------------------------------------------------------------------
      # Org2: See "Org1" for full specification
      # ---------------------------------------------------------------------------
      - Name: Org2
        Domain: org2.example.com
        Template:
          Count: 2
        Users:
          Count: 1
      # ---------------------------------------------------------------------------
      # Org3: See "Org1" for full specification
      # ---------------------------------------------------------------------------
      - Name: Org3
        Domain: org3.example.com
        Template:
          Count: 2
        Users:
          Count: 1
      # ---------------------------------------------------------------------------
      # Org4: See "Org1" for full specification
      # ---------------------------------------------------------------------------
      - Name: Org4
        Domain: org4.example.com
        Template:
          Count: 2
        Users:
          Count: 1

---
apiVersion: batch/v1
kind: Job
metadata:
  name: utils
  namespace: ledger
spec:
  backoffLimit: 1
  template:
    metadata:
      name: utils
    spec:
      restartPolicy: "Never"
      containers:
      - name: cryptogen
        image: hyperledger/fabric-tools:1.4.0
        imagePullPolicy: Always
        command: ["sh", "-c", "echo 'Cryptogen Starts'; ls -l /fabric; while [ ! -d /fabric ]; do echo Waiting for configFiles; sleep 1; done; cryptogen generate --config /config/crypto-config.yaml && cp -r crypto-config /fabric/ && for file in $(find /fabric/ -iname *_sk); do echo $file; dir=$(dirname $file); echo ${dir}; mv ${dir}/*_sk ${dir}/key.pem; done && find /fabric -type d | xargs chmod a+rx && find /fabric -type f | xargs chmod a+r && touch /fabric/status_cryptogen_complete;"]
        volumeMounts:
        - mountPath: /fabric
          name: fabric
        - name: config
          mountPath: "/config"
          readOnly: true
      - name: configtxgen
        image: hyperledger/fabric-tools:1.4.0
        imagePullPolicy: Always
        command: ["sh", "-c", "echo 'Configtxgen Starts'; ls -l /fabric; sleep 1 && while [ ! -f /fabric/status_cryptogen_complete ]; do echo Waiting for cryptogen; sleep 1; done; cp /config/configtx.yaml /fabric/; cd /fabric/; export FABRIC_CFG_PATH=$PWD; configtxgen -profile FourOrgsOrdererGenesis -outputBlock genesis.block && find /fabric -type d | xargs chmod a+rx && find /fabric -type f | xargs chmod a+r && touch /fabric/status_configtxgen_complete && rm /fabric/status_cryptogen_complete;"]
        volumeMounts:
        - mountPath: /fabric
          name: fabric
        - name: config
          mountPath: "/config"
          readOnly: true
      volumes:
      - name: fabric
        nfs:
          server: nfs-server.ledger.svc.cluster.local
          path: "/"
      - name: config
        configMap:
          name: fabric-config
          items:
          - key: "configtx.yaml"
            path: "configtx.yaml"
          - key: "crypto-config.yaml"
            path: "crypto-config.yaml"
